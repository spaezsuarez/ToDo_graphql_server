scalar Date

type ItemTask{
    _id:Int!
    isDone:Int!
    text:String!
}

type Task{
    _id:ID
    title:String!
    description:String
    isDone:Int!
    startDate: Date!
    endDate: Date
    itemsTasks:[ItemTask]
}

type User{
    _id:ID
    name:String
    password:String
    email:String
    tasks:[Task]
}

input UserInput{
    name:String
    email:String
    password:String
}

input ItemTaskInput{
    _id:Int!
    isDone:Int!
    text:String!
}

input TaskInput{
    title:String
    description:String
    isDone:Int
    startDate:Date
    endDate:Date
    itemsTasks:[ItemTaskInput]
}

type Query{
    authUser(user:UserInput):User
    getUsers:[User]
}

type Mutation{
    createUser(userInput:UserInput):User
    createTaskData(idUser:String,taskInput:TaskInput):Task
    createItemTask(idTask:String,itemTaskInput:ItemTaskInput):ItemTask
    updateUserInfo(idUser:String,userData:UserInput):User
    updateTaskInfo(idTask:String,taskData:TaskInput):Task
    updateItemTaskInfo(idTask:String,itemData:ItemTaskInput):ItemTask
    deleteUser(idUser:String):Boolean
    deleteTask(idTask:String):Boolean
    deleteItemTask(idTask:String,idItem:Int):Boolean
}
